version: '3'

services:
    django:
        build: .
        container_name: txns_container
        image: tokka_txns_challenge:latest
        ports:
            - "8000:8000"
        env_file:
            - .env
        command: bash -c "
            python manage.py initialize_db &&
            python manage.py runserver 0.0.0.0:8000"
        depends_on:
            - timescaledb
        networks:
            - txns_network

    realtime_service:
        build: .
        container_name: realtime_record_container
        image: tokka_txns_challenge:latest
        env_file:
            - .env
        command: bash -c "
            python manage.py initialize_db &&
            python manage.py realtime_record"
        depends_on:
            - timescaledb
        networks:
            - txns_network

    batch_service:
        build: .
        container_name: batch_record_container
        image: tokka_txns_challenge:latest
        env_file:
            - .env
        depends_on:
            - timescaledb
        networks:
            - txns_network

    django_test:
        build: .
        container_name: django_test_container
        image: tokka_txns_challenge:latest
        env_file:
            - .env
        depends_on:
            - timescaledb
        networks:
            - txns_network

    pgadmin:
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ""
            PGADMIN_DEFAULT_PASSWORD: ""
        ports:
            - "5050:80"  # Expose pgAdmin on port 5050 of the host
        depends_on:
            - timescaledb
        networks:
            - txns_network

    timescaledb:
        image: timescale/timescaledb:latest-pg14
        environment:
            POSTGRES_PASSWORD: ""
        volumes:
            - timescaledb_data:/var/lib/postgresql/data  # Persist database between container restarts
        networks:
            - txns_network

volumes:
    timescaledb_data:

networks:
    txns_network:
        driver: bridge
